models.sfmt[[i]] <- sfxrmtnsafc$arma
if (i == numy.sf){
pred <- forecast(sfxrmtnsafc, extra.sf)
if (extra.sf == 12){
maes.sfmt[i] <- mean(abs(pred$mean - window(sfxrmtnsats, (1986 + i + 1), c(1986 + i + 1, 12))))
} else {
maes.sfmt[i] <- mean(abs(pred$mean - window(sfxrmtnsats, (1986 + i + 1), c(1986 + i + 2, extra.sf - 12))))
}
} else {
pred <- forecast(sfxrmtnsafc, 12)
maes.sfmt[i] <- mean(abs(pred$mean - window(sfxrmtnsats, (1986 + i + 1), c(1986 + i + 1, 12))))
}
}
para.sfmt <- models.sfmt[[which.min(maes.sfmt[2:numy.sf]) + 1]]
sfxrmtnsafc <- arima(sfxrmtnsats, order = c(para.sfmt[1], para.sfmt[6], para.sfmt[2]), seasonal = list(order = c(para.sfmt[3], para.sfmt[7], para.sfmt[4]), period = para.sfmt[5]))
prediction.sfmt <- forecast(sfxrmtnsafc, (24 - extra.sf))
pred.sfmt <- prediction.sfmt$mean
# combine the original data and the prediction into one data frame
sfxrnsa <- cbind(sfxrhtnsats, sfxrmtnsats, sfxrltnsats, pred.sfht, pred.sfmt, pred.sflt)
# use dygraphs package to plot the data and the prediction for three tiers in one graph
dygraph(sfxrnsa, main = "旧金山房价指数") %>%
dyAxis("x", label = "年份", drawGrid = FALSE, pixelsPerLabel = 40, axisLabelFormatter = "function(d){return d.getFullYear();}") %>%
dyAxis("y", label = "房价指数") %>%
dySeries("sfxrhtnsats", label = "高端", strokeWidth = 3) %>%
dySeries("sfxrmtnsats", label = "中端", strokeWidth = 3) %>%
dySeries("sfxrltnsats", label = "低端", strokeWidth = 3) %>%
dySeries("pred.sfht", label = "高端预测", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.sfmt", label = "中端预测", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.sflt", label = "低端预测", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dyShading(from = "2018-1-1", to = "2018-12-1") %>%
dyOptions(strokeWidth = 3, colors = RColorBrewer::brewer.pal(3, "Dark2")) %>%
dyLegend(width = 600)
# compare the index for all three tiers between the most current and one years ago
compareInd(sfxrhtnsats, c(2016,12), 12)
compareInd(sfxrmtnsats, c(2016,12), 12)
compareInd(sfxrltnsats, c(2016,12), 12)
# compare the predicted index in 2018.12 and the index in 2017.12
(pred.sfht[12] - sfxrhtnsats[372])/ sfxrhtnsats[372]
(pred.sfmt[12] - sfxrmtnsats[372])/ sfxrmtnsats[372]
(pred.sflt[12] - sfxrltnsats[372])/ sfxrltnsats[372]
# to compute the difference betwen the index at two different time
# a compareInd function was created. Input is a TS object,
# the prior time, as a year and month integer vector, such as c(2018, 1)
# and the time gap between in month
compareInd <- function(tsobj, time1, timegap){
tmp <- window(tsobj, time1)
res <- (tmp[timegap + 1] - tmp[1])/ tmp[1]
return(res)
}
# compare the index for all three tiers between the most current and one years ago
compareInd(sfxrhtnsats, c(2016,12), 12)
compareInd(sfxrmtnsats, c(2016,12), 12)
compareInd(sfxrltnsats, c(2016,12), 12)
# load necessary library
library(forecast) # for prediction
# load all csv file into resultframe
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
setwd("~/Documents/Work/Case-Shiller/15 US Cities Case-Shiller")
setwd("~/Case-Shiller/Data Set")
setwd("~/Case-Shiller/Data Set")
setwd("~/Work/")
getwd
gwtwd()
setwd("./Case-Shiller/Data Set")
?getwd
getwd()
setwd("../Case-Shiller/Data Set")
setwd("../Data Set")
knitr::opts_chunk$set(echo = TRUE)
# define a function to find a optimal model for input data
# tsobj input is time series object and syear is the start year of the data
nextYearPred <- function(tsobj, syear){
# to obtain the number of trainning groups and the number of months in the last test group
numy = floor(length(tsobj) / 12) - 1
extra = length(tsobj) - numy * 12
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, syear, c(syear - 1 + i, 12)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
if (i == numy){
pred <- forecast(tsobjfc, extra)
if (extra == 12){
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i, 12))))
} else {
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i + 1, extra - 12))))
}
} else {
pred <- forecast(tsobjfc, 12)
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i, 12))))
}
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, (24 - extra))
# return the forecast object
return(prediction)
}
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats, 1987)$mean
# convert Boston Home Index data (3 tiers) into time series object
boxrhtnsats <- ts(BOXRHTNSA[,2], start = c(1987, 1), frequency = 12)
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats, 1987)$mean
pred.bosht
install.packages("reticulate")
# convert Boston Home Index data (3 tiers) into time series object
boxrhtnsats <- ts(BOXRHTNSA[,2], start = c(1987, 1), frequency = 12)
time(boxrhtnsats)
time(boxrhtnsats[1])
time(boxrhtnsats[1,])
time(boxrhtnsats[1])
boxrhtnsats[1]
?ts
time(boxrhtnsats)[1]
start(boxrhtnsats)
start(boxrhtnsats)
boxrhtnsats2 <- ts(BOXRHTNSA[2:372,2], start = c(1987, 2), frequency = 12)
start(boxrhtnsats2)
# create a function to trim to the time series object that is a multiplier of 12 monthes
yearTrim <- myfunction(tsobj){
# define a function to find a optimal model for input data
# tsobj input is time series object and syear is the start year of the data
nextYearPred <- function(tsobj, syear){
# to obtain the number of trainning groups and the number of months in the last test group
numy = floor(length(tsobj) / 12) - 1
extra = length(tsobj) - numy * 12
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, syear, c(syear - 1 + i, 12)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
if (i == numy){
pred <- forecast(tsobjfc, extra)
if (extra == 12){
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i, 12))))
} else {
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i + 1, extra - 12))))
}
} else {
pred <- forecast(tsobjfc, 12)
maes[i] <- mean(abs(pred$mean - window(tsobj, (syear + i), c(syear + i, 12))))
}
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, (24 - extra))
# return the forecast object
return(prediction)
}
yearTrim <- myfunction(tsobj){
# to obtain the number of years and the number of left-over months
numy = floor(length(tsobj) / 12)
extra = length(tsobj) - numy * 12
# to get the start year and month of the object
start <- start(tsobj)
# to trim the time series object
result <- window(tsobj, start = c(start[1], start[2] + extra), frequency = 12)
#return the trimmed time series object
return(result)
}
yearTrim <- function(tsobj){
# to obtain the number of years and the number of left-over months
numy = floor(length(tsobj) / 12)
extra = length(tsobj) - numy * 12
# to get the start year and month of the object
start <- start(tsobj)
# to trim the time series object
result <- window(tsobj, start = c(start[1], start[2] + extra), frequency = 12)
#return the trimmed time series object
return(result)
}
yearTrim(boxrhtnsats2)
yearTrim <- function(tsobj){
# to obtain the number of years and the number of left-over months
numy = floor(length(tsobj) / 12)
extra = length(tsobj) - numy * 12
# to get the start year and month of the object
start <- start(tsobj)
# to trim the time series object
result <- window(tsobj, start = c(start[1], start[2] + extra))
#return the trimmed time series object
return(result)
}
boxrhtnsats3 <- window(boxrhtnsats, c(1987,11), c(2017,02))
yearTrim(boxrhtnsats3)
tmp1 <- floor(length(boxrhtnsats3) / 12)
tmp1
2017-1987
tmp2 <- length(boxrhtnsats3) - tmp1 * 12
tmp2
window(boxrhtnsats, c(1987, 15))
window(boxrhtnsats3, c(1990, 3), c(1990, 3+ 11))
window(boxrhtnsats3, c(1990, 3), c(1990, 3+ 12))
length(window(boxrhtnsats3, c(1990, 3), c(1990, 3+ 11)))
pred.bosht
pred.bosmt
# create a function to trim to the time series object that is a multiplier of 12 monthes
yearTrim <- function(tsobj){
# to obtain the number of years and the number of left-over months
numy <- floor(length(tsobj) / 12)
extra <- length(tsobj) - numy * 12
# to get the start year and month of the object
start <- start(tsobj)
# to trim the time series object
result <- window(tsobj, start = c(start[1], start[2] + extra))
#return the trimmed time series object
return(result)
}
# the cross-validation implied here is a rolling basis
# for example, the first training group is year 1 and test group is year 2
# then, the second training group is year 1 and 2 and test group is year 3
# the training group keeps rolling up each iteration and test group is always the next 12 months
# define a function to find a optimal model for input data
# tsobj input is time series object
nextYearPred <- function(tsobj){
# to get the start time
stime <- time(tsobj)
# to obtain the number of trainning groups
numy = length(tsobj) / 12 - 1
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
pred <- forecast(tsobjfc, 12)
# store the mean absolute errors (MAEs)
maes[i] <- mean(abs(pred$mean - window(tsobj, c(stime[1] + i, stime[2]), c(stime[1] + i, stime[2] + 11))))
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, (24 - extra))
# return the forecast object
return(prediction)
}
# convert Boston Home Index data (3 tiers) into time series object
boxrhtnsats <- ts(BOXRHTNSA[,2], start = c(1987, 1), frequency = 12)
boxrltnsats <- ts(BOXRLTNSA[,2], start = c(1987, 1), frequency = 12)
boxrmtnsats <- ts(BOXRMTNSA[,2], start = c(1987, 1), frequency = 12)
# trim the time series objects to be a multiplier of 12 monthes
boxrhtnsats <- yearTrim(boxrhtnsats)
boxrltnsats <- yearTrim(boxrltnsats)
boxrmtnsats <- yearTrim(boxrmtnsats)
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats)$mean
# repeat the modelling process on other two tiers
# for low tier
pred.boslt <- nextYearPred(boxrltnsats)$mean
# for middle tier
pred.bosmt <- nextYearPred(boxrmtnsats)$mean
# combine the original data and the prediction into one data frame
boxrnsa <- cbind(boxrhtnsats, boxrmtnsats, boxrltnsats, pred.bosht, pred.bosmt, pred.boslt)
# use dygraphs package to plot the data and the prediction for three tiers in one graph
dygraph(boxrnsa, main = "Home Price Index for Boston, Massachusetts") %>%
dyAxis("x", label = "Time", drawGrid = FALSE, pixelsPerLabel = 40, axisLabelFormatter = "function(d){return d.getFullYear();}") %>%
dyAxis("y", label = "Price Index") %>%
dySeries("boxrhtnsats", label = "High Tier", strokeWidth = 3) %>%
dySeries("boxrmtnsats", label = "Middle Tier", strokeWidth = 3) %>%
dySeries("boxrltnsats", label = "Low Tier", strokeWidth = 3) %>%
dySeries("pred.bosht", label = "Prediction for High Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.bosmt", label = "Prediction for Middle Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.boslt", label = "Prediction for Low Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Dark2")) %>%
dyShading(from = "2018-1-1", to = "2018-12-1") %>%
dyLegend(width = 600)
# convert Boston Home Index data (3 tiers) into time series object
boxrhtnsats <- ts(BOXRHTNSA[,2], start = c(1987, 1), frequency = 12)
boxrltnsats <- ts(BOXRLTNSA[,2], start = c(1987, 1), frequency = 12)
boxrmtnsats <- ts(BOXRMTNSA[,2], start = c(1987, 1), frequency = 12)
# trim the time series objects to be a multiplier of 12 monthes
boxrhtnsats <- yearTrim(boxrhtnsats)
boxrltnsats <- yearTrim(boxrltnsats)
boxrmtnsats <- yearTrim(boxrmtnsats)
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats)$mean
tsobj <- boxrhtnsats
stime <- time(tsobj)
# to obtain the number of trainning groups
numy = length(tsobj) / 12 - 1
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
pred <- forecast(tsobjfc, 12)
# store the mean absolute errors (MAEs)
maes[i] <- mean(abs(pred$mean - window(tsobj, c(stime[1] + i, stime[2]), c(stime[1] + i, stime[2] + 11))))
}
i  = 2
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
stime
# define a function to find a optimal model for input data
# tsobj input is time series object
nextYearPred <- function(tsobj){
# to get the start time
stime <- time(tsobj)[1]
# to obtain the number of trainning groups
numy = length(tsobj) / 12 - 1
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
pred <- forecast(tsobjfc, 12)
# store the mean absolute errors (MAEs)
maes[i] <- mean(abs(pred$mean - window(tsobj, c(stime[1] + i, stime[2]), c(stime[1] + i, stime[2] + 11))))
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, (24 - extra))
# return the forecast object
return(prediction)
}
# convert Boston Home Index data (3 tiers) into time series object
boxrhtnsats <- ts(BOXRHTNSA[,2], start = c(1987, 1), frequency = 12)
boxrltnsats <- ts(BOXRLTNSA[,2], start = c(1987, 1), frequency = 12)
boxrmtnsats <- ts(BOXRMTNSA[,2], start = c(1987, 1), frequency = 12)
# trim the time series objects to be a multiplier of 12 monthes
boxrhtnsats <- yearTrim(boxrhtnsats)
boxrltnsats <- yearTrim(boxrltnsats)
boxrmtnsats <- yearTrim(boxrmtnsats)
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats)$mean
# for low tier
pred.boslt <- nextYearPred(boxrltnsats)$mean
# to get the start time
stime <- time(tsobj)[1]
stime
stime <- time(tsobj)[1,]
# define a function to find a optimal model for input data
# tsobj input is time series object
nextYearPred <- function(tsobj){
# to get the start time
stime <- start(tsobj)
# to obtain the number of trainning groups
numy = length(tsobj) / 12 - 1
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
pred <- forecast(tsobjfc, 12)
# store the mean absolute errors (MAEs)
maes[i] <- mean(abs(pred$mean - window(tsobj, c(stime[1] + i, stime[2]), c(stime[1] + i, stime[2] + 11))))
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, (24 - extra))
# return the forecast object
return(prediction)
}
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats)$mean
# for low tier
pred.boslt <- nextYearPred(boxrltnsats)$mean
# define a function to find a optimal model for input data
# tsobj input is time series object
nextYearPred <- function(tsobj){
# to get the start time
stime <- start(tsobj)
# to obtain the number of trainning groups
numy = length(tsobj) / 12 - 1
# to create one numeric vector for storing mae value and one list for ARIMA parameters
models <- vector("list", numy)
maes <- vector("numeric", numy)
# loop through every year
for (i in 2:numy){
# fit the model on the data
tsobjfc <- auto.arima(window(tsobj, stime, c(stime[1], stime[2] + i * 12 - 1)), D = 1)
# store model parameters
models[[i]] <- tsobjfc$arma
# generate the prediction for the test group
pred <- forecast(tsobjfc, 12)
# store the mean absolute errors (MAEs)
maes[i] <- mean(abs(pred$mean - window(tsobj, c(stime[1] + i, stime[2]), c(stime[1] + i, stime[2] + 11))))
}
# using mae criterion for the best fitting model
para <- models[[which.min(maes[2:numy]) + 1]]
# fit the optimal model to the whole data set
# and predict for the next whole year
tsobjfc.a <- arima(tsobj, order = c(para[1], para[6], para[2]), seasonal = list(order = c(para[3], para[7], para[4]), period = para[5]), method = "ML")
prediction <- forecast(tsobjfc.a, 12)
# return the forecast object
return(prediction)
}
# run the function for high tier in Boston
pred.bosht <- nextYearPred(boxrhtnsats)$mean
# for low tier
pred.boslt <- nextYearPred(boxrltnsats)$mean
# for low tier
pred.boslt <- nextYearPred(boxrltnsats)$mean
# for middle tier
pred.bosmt <- nextYearPred(boxrmtnsats)$mean
# combine the original data and the prediction into one data frame
boxrnsa <- cbind(boxrhtnsats, boxrmtnsats, boxrltnsats, pred.bosht, pred.bosmt, pred.boslt)
dygraph(boxrnsa, main = "Home Price Index for Boston, Massachusetts") %>%
dyAxis("x", label = "Time", drawGrid = FALSE, pixelsPerLabel = 40, axisLabelFormatter = "function(d){return d.getFullYear();}") %>%
dyAxis("y", label = "Price Index") %>%
dySeries("boxrhtnsats", label = "High Tier", strokeWidth = 3) %>%
dySeries("boxrmtnsats", label = "Middle Tier", strokeWidth = 3) %>%
dySeries("boxrltnsats", label = "Low Tier", strokeWidth = 3) %>%
dySeries("pred.bosht", label = "Prediction for High Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.bosmt", label = "Prediction for Middle Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dySeries("pred.boslt", label = "Prediction for Low Tier", strokeWidth = 4, strokePattern = c(7, 3)) %>%
dyOptions(colors = RColorBrewer::brewer.pal(3, "Dark2")) %>%
dyShading(from = "2018-1-1", to = "2018-12-1") %>%
dyLegend(width = 600)
compareInd(boxrhtnsats, c(2016,12), 12)
compareInd(boxrmtnsats, c(2016,12), 12)
compareInd(boxrltnsats, c(2016,12), 12)
(pred.bosht[12] - boxrhtnsats[372])/ boxrhtnsats[372]
(pred.bosmt[12] - boxrmtnsats[372])/ boxrmtnsats[372]
(pred.boslt[12] - boxrltnsats[372])/ boxrltnsats[372]
# load all csv file into resultframe
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
# load all csv file into resultframe
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
temp
# set the workign directory to the data set
setwd("../Data Set")
# load all csv file into resultframe
temp <- list.files(pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
# load all csv file into dataframe
temp = list.files(pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
# load all csv file into dataframe
temp = list.files(pattern="*.csv")
temp
list.files
?list.files
# load all csv file into dataframe
temp = list.files(path = "../Data Set", pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
# set the workign directory to the data set
setwd("../Data Set")
# load necessary library
library(forecast) # for prediction
library(dygraphs) # for visulization
# load all csv file into dataframe
temp = list.files(path = "../Data Set", pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
}
?read.csv
# load all csv file into dataframe
temp = list.files(path = "../Data Set", pattern="*.csv")
for (i in 1:length(temp)) {
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(path = "../Data Set",temp[i]))
}
assign(strtrim(temp[i], (nchar(temp[i]) - 4)), read.csv(temp[i]))
read.csv(temp[1])
